;;; package --- dotemacs

;;; Commentary:

;;; Code: 

(require 'jka-compr)

;; https://github.com/purcell/exec-path-from-shell
;; only need exec-path-from-shell on OSX
;; this hopefully sets up path and other vars better
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

;; For development, makes it easy to work on local versions of these packages
;;(setq package-load-list '((perspective nil) (persp-projectile nil) (restclient nil) all))

;; Configure main workspace
;; `HOME` shoudl be set in .bashrc or .zshrc (or .zsh-customizations)
;; `WORKSPACE_DIR` should be set in .bashrc or .zshrc (or .zsh-customizations)
(defvar emacs-root (concat (getenv "HOME") "/"))
(defvar workspace-dir (getenv "WORKSPACE_DIR"))
(defvar ws-root (concat emacs-root workspace-dir "/"))

(require 'cl-lib) ;; Note: if this causes issues, switch to (require 'cl)
(cl-labels
    ((add-path (p) (add-to-list 'load-path (concat emacs-root p))))
  (add-path (concat workspace-dir "/ebnf-mode"))
  (add-path "emacs/lisp")
  (add-path (concat workspace-dir "/ac-irony")) ;; git@github.com:Sarcasm/ac-irony.git
  (add-path (concat workspace-dir "/slime")))

(load-library "package-extensions")
(load-library "commands")
(load-library "c-mode-hacks")
(load-library "clojure-mode-hacks")
(load-library "ebnf-mode")
(load-library "emacs-lisp-mode-hacks")
(load-library "elixir-hacks")
(load-library "go-mode-hacks")
(load-library "html-mode-hacks")
(load-library "irony-mode-hacks")
(load-library "jinja2-hacks")
(load-library "objc-mode-hacks")
(load-library "shell-script-mode-hacks")
(load-library "text-mode-hacks")
(load-library "web-mode-hacks")
(load-library "workspace")
(load-library "perspective-hacks")
(load-library "org-mode-hacks")
(load-library "restclient-hacks")
(load-library "python-mode-hacks")
(load-library "ropemacs-hacks")
(load-library "neotree-hacks")
(load-library "mouse-hacks")
(load-library "ekeys")

;; Helm
(require 'helm)
(require 'helm-config)

(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-unset-key (kbd "C-x c"))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-t")  'helm-select-action) ; list actions using C-t
(global-set-key (kbd "M-z") 'helm-M-x)

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(setq helm-ff-skip-boring-files t)
(setq helm-boring-file-regexp-list
      '("\\.git$" "\\.hg$" "\\.svn$" "\\.CVS$" "\\._darcs$" "\\.la$" "\\.o$" "~$"
        "\\.so$" "\\.a$" "\\.elc$" "\\.fas$" "\\.fasl$" "\\.pyc$" "\\.pyo$" "^\\.\\#"
        "^\\#"))

(helm-mode 1)

;; Helm Dash
(require 'helm-dash)
(setq helm-dash-docset-path '(expand-file-name "~/.docsets"))
(setq helm-dash-common-docsets '("Clojure" "iOS" "Emacs Lisp" "Bootstrap 3" "Android"))
(setq helm-dash-browser-func 'w3m)

(setq redisplay-preemption-period nil)
(electric-pair-mode +1)

;; yasnippets
(require 'yasnippet)
(setq yas/trigger-key (kbd "C-c <kp-multiply>"))
(yas/initialize)

;; I need to figure out why this makes emacs so slow.
;; (setq yas/root-directory '("~/.emacs.d/yasnippet"))
;; (mapc 'yas/load-directory yas/root-directory)

;; auto-complete
(require 'auto-complete-config)
(ac-config-default)

(setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
(add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
(add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
(add-hook 'auto-complete-mode-hook 'ac-common-setup)
(global-auto-complete-mode t)
(add-to-list 'ac-modes 'objc-mode)

;; Remove trailing whitespace on file save
;;(add-hook 'before-save-hook 'delete-trailing-whitespace)

(prefer-coding-system 'utf-8)
(set-face-attribute 'default nil :height 90)
(setq-default truncate-lines t)
(setq-default indent-tabs-mode nil)
(global-font-lock-mode 1)

;; General settings
(setq inhibit-startup-message t
      initial-scratch-message nil
      major-mode 'fundamental-mode
      next-line-add-newlines nil
      scroll-step 1
      scroll-conservatively 1
      font-lock-maximum-decoration t
      require-final-newline t
      truncate-partial-width-windows nil
      shift-select-mode nil
      echo-keystrokes 0.1
      x-select-enable-clipboard t
      mouse-yank-at-point t
      custom-unlispify-tag-names nil
      ring-bell-function '(lambda ()))

;; Display line, column and time (24h format)
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)
(global-hi-lock-mode 1)

(show-paren-mode 1)
(setq show-paren-delay 0)

;; Hide things that just take up space
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

(require 'uniquify)
(setq
  uniquify-buffer-name-style 'post-forward
  uniquify-separator ":")

;; Enable editorconfig
(require 'editorconfig)
(editorconfig-mode 1)

;; Enable flycheck
(require 'flycheck)

;; turn on flychecking globally
(add-hook 'after-init-hook #'global-flycheck-mode)

;; turn on dumb-jump-mode
(require 'dumb-jump)
(dumb-jump-mode)

;; Eliminate some annoying prompts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(fset 'yes-or-no-p 'y-or-n-p)
(setq confirm-nonexistent-file-or-buffer nil)
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)

(require 'slime-autoloads)
(setq inferior-lisp-program "/usr/local/bin/sbcl")

(load-library "~/.customizations") ;; Things that change from machine to machine

;; Make ansi-term work nicely on OS X
;; Be sure to run the following command once after each emacs upgrade, otherwise,
;; weird characters will show up in ansi-term when using zsh.
;;
;; tic -o ~/.terminfo /usr/local/Cellar/emacs/24.4/share/emacs/24.4/etc/e/eterm-color.ti
(when (eq system-type 'darwin) (setq system-uses-terminfo nil))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("96998f6f11ef9f551b427b8853d947a7857ea5a578c75aa9c4e7c73fe04d10b4" "18a33cdb764e4baf99b23dcd5abdbf1249670d412c6d3a8092ae1a7b211613d5" "0c29db826418061b40564e3351194a3d4a125d182c6ee5178c237a7364f0ff12" "46fd293ff6e2f6b74a5edf1063c32f2a758ec24a5f63d13b07a20255c074d399" "3cd28471e80be3bd2657ca3f03fbb2884ab669662271794360866ab60b6cb6e6" "3cc2385c39257fed66238921602d8104d8fd6266ad88a006d0a4325336f5ee02" "e9776d12e4ccb722a2a732c6e80423331bcb93f02e089ba2a4b02e85de1cf00e" "72a81c54c97b9e5efcc3ea214382615649ebb539cb4f2fe3a46cd12af72c7607" "58c6711a3b568437bab07a30385d34aacf64156cc5137ea20e799984f4227265" "3d5ef3d7ed58c9ad321f05360ad8a6b24585b9c49abcee67bdcbb0fe583a6950" "b3775ba758e7d31f3bb849e7c9e48ff60929a792961a2d536edec8f68c671ca5" "7bde52fdac7ac54d00f3d4c559f2f7aa899311655e7eb20ec5491f3b5c533fe8" "8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" "31a01668c84d03862a970c471edbd377b2430868eccf5e8a9aec6831f1a0908d" "1297a022df4228b81bc0436230f211bad168a117282c20ddcba2db8c6a200743" "4af6fad34321a1ce23d8ab3486c662de122e8c6c1de97baed3aa4c10fe55e060" "0ba649556dc51762e6794b92017f6f7406754ae3136eafef686d81c6da176cc5" "a2e7b508533d46b701ad3b055e7c708323fb110b6676a8be458a758dd8f24e27" "ba9be9caf9aa91eb34cf11ad9e8c61e54db68d2d474f99a52ba7e87097fa27f5" "28ec8ccf6190f6a73812df9bc91df54ce1d6132f18b4c8fcc85d45298569eb53" "987b709680284a5858d5fe7e4e428463a20dfabe0a6f2a6146b3b8c7c529f08b" "d677ef584c6dfc0697901a44b885cc18e206f05114c8a3b7fde674fce6180879" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" default)))
 '(magit-diff-use-overlays nil)
 '(magit-use-overlays nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil)))))

;; see `man manpath`
(global-set-key [(f1)] (lambda () (interactive) (manual-entry (current-word))))

(provide 'dotemacs)
;;; dotemacs ends here
(put 'upcase-region 'disabled nil)
