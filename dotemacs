(require 'jka-compr)

;; Track my home directory across platforms
(defvar emacs-root (cond ((eq system-type 'darwin)
                          "/Users/rob/")
                         ((or (eq system-type 'linux)
                              (eq system-type 'gnu/linux))
                          "/home/rob/")
                         (t "/home/rob/")))
(require 'cl)
(cl-labels
    ((add-path (p) (add-to-list 'load-path (concat emacs-root p))))
  (add-path "emacs/lisp")
  (add-path "ws/slime")
  (add-path "ws/perspective-el"))

(load-library "package-extensions")
(load-library "commands")
(load-library "c-mode-hacks")
(load-library "clojure-mode-hacks")
(load-library "emacs-lisp-mode-hacks")
(load-library "go-mode-hacks")
(load-library "html-mode-hacks")
(load-library "objc-mode-hacks")
(load-library "shell-script-mode-hacks")
(load-library "text-mode-hacks")
(load-library "web-mode-hacks")
(load-library "ekeys")
(load-library "workspace")
(load-library "perspective-hacks")

;; Helm
(require 'helm)
(require 'helm-config)

(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-t")  'helm-select-action) ; list actions using C-t
(global-set-key (kbd "M-z") 'helm-M-x)

(when (executable-find "curl")
  (setq helm-google-suggest-use-curl-p t))

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode 1)

;; Helm Dash
(require 'helm-dash)
(setq helm-dash-common-docsets '("Clojure" "iOS-8.1"))
(setq helm-dash-browser-func 'w3m)

(setq redisplay-preemption-period nil)
(electric-pair-mode +1)

;; yasnippets
(require 'yasnippet)
(setq yas/trigger-key (kbd "C-c <kp-multiply>"))
(yas/initialize)

;; I need to figure out why this makes emacs so slow.
;; (setq yas/root-directory '("~/.emacs.d/yasnippet"))
;; (mapc 'yas/load-directory yas/root-directory)

;; auto-complete
(require 'auto-complete-config)
(ac-config-default)

(setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
(add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
(add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
(add-hook 'auto-complete-mode-hook 'ac-common-setup)
(global-auto-complete-mode t)
(add-to-list 'ac-modes 'objc-mode)

;; Remove trailing whitespace on file save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(prefer-coding-system 'utf-8)
(set-face-attribute 'default nil :height 90)
(setq-default truncate-lines t)
(setq-default indent-tabs-mode nil)
(global-font-lock-mode 1)

;; General settings
(setq inhibit-startup-message t
      initial-scratch-message nil
      major-mode 'fundamental-mode
      next-line-add-newlines nil
      scroll-step 1
      scroll-conservatively 1
      font-lock-maximum-decoration t
      require-final-newline t
      truncate-partial-width-windows nil
      shift-select-mode nil
      echo-keystrokes 0.1
      x-select-enable-clipboard t
      mouse-yank-at-point t
      custom-unlispify-tag-names nil
      ring-bell-function '(lambda ()))

;; Display line, column and time (24h format)
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)
(display-time)
(setq display-time-24hr-format t)
(global-hi-lock-mode 1)

(show-paren-mode 1)
(setq show-paren-delay 0)

;; Hide things that just take up space
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

(require 'uniquify)
(setq
  uniquify-buffer-name-style 'post-forward
  uniquify-separator ":")

;; Eliminate some annoying prompts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(fset 'yes-or-no-p 'y-or-n-p)
(setq confirm-nonexistent-file-or-buffer nil)
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)

(require 'slime-autoloads)
(setq inferior-lisp-program "/usr/local/bin/sbcl")

(load-library "~/.customizations") ;; Things that change from machine to machine
